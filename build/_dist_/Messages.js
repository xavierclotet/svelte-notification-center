import './Messages.css.proxy.js';
/* src/Messages.svelte generated by Svelte v3.23.2 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	is_function,
	listen,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	set_data,
	space,
	svg_element,
	text
} from "/web_modules/svelte/internal.js";

import { center } from "./notifications.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (68:2) {#if $center.length}
function create_if_block_1(ctx) {
	let span;
	let t_value = /*$center*/ ctx[2].length + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
			attr(span, "class", "badge svelte-1tpsxuz");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*$center*/ 4 && t_value !== (t_value = /*$center*/ ctx[2].length + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (73:0) {#if show && $center.length}
function create_if_block(ctx) {
	let button0;
	let t0;
	let div1;
	let ul;
	let t1;
	let div0;
	let button1;
	let mounted;
	let dispose;
	let each_value = /*messages*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			button0 = element("button");
			t0 = space();
			div1 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			div0 = element("div");
			button1 = element("button");
			button1.textContent = "clear all";
			attr(button0, "tabindex", "-1");
			attr(button0, "class", "fixed inset-0 w-full h-full cursor-default focus:outline-none");
			attr(ul, "class", "space-y-3");
			attr(button1, "class", "px-2 text-sm text-blue-200 bg-blue-700 rounded-sm");
			attr(div0, "class", "flex justify-end mt-3");
			attr(div1, "class", "absolute right-0 p-3 mt-1 text-gray-600 bg-white rounded shadow-md\n    messages svelte-1tpsxuz");
		},
		m(target, anchor) {
			insert(target, button0, anchor);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append(div1, t1);
			append(div1, div0);
			append(div0, button1);

			if (!mounted) {
				dispose = [
					listen(button0, "click", prevent_default(/*click_handler*/ ctx[7])),
					listen(button1, "click", /*clearAll*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*handleDismiss, messages*/ 10) {
				each_value = /*messages*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(button0);
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (83:6) {#each messages as message}
function create_each_block(ctx) {
	let li;
	let p;
	let t0_value = /*message*/ ctx[8] + "";
	let t0;
	let t1;
	let div;
	let button;
	let t3;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			p = element("p");
			t0 = text(t0_value);
			t1 = space();
			div = element("div");
			button = element("button");
			button.textContent = "dismiss";
			t3 = space();
			attr(button, "class", "px-2 text-sm text-blue-200 bg-blue-700 rounded-sm");
			attr(div, "class", "mt-1");
			attr(li, "class", "p-3 border rounded");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, p);
			append(p, t0);
			append(li, t1);
			append(li, div);
			append(div, button);
			append(li, t3);

			if (!mounted) {
				dispose = listen(button, "click", function () {
					if (is_function(/*handleDismiss*/ ctx[3](/*message*/ ctx[8]))) /*handleDismiss*/ ctx[3](/*message*/ ctx[8]).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*messages*/ 2 && t0_value !== (t0_value = /*message*/ ctx[8] + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let button;
	let svg;
	let path0;
	let path1;
	let t0;
	let t1;
	let if_block1_anchor;
	let mounted;
	let dispose;
	let if_block0 = /*$center*/ ctx[2].length && create_if_block_1(ctx);
	let if_block1 = /*show*/ ctx[0] && /*$center*/ ctx[2].length && create_if_block(ctx);

	return {
		c() {
			button = element("button");
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			attr(path0, "d", "M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9");
			attr(path1, "d", "M13.73 21a2 2 0 0 1-3.46 0");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "24");
			attr(svg, "height", "24");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "fill", "none");
			attr(svg, "stroke", "currentColor");
			attr(svg, "stroke-width", "2");
			attr(svg, "stroke-linecap", "round");
			attr(svg, "stroke-linejoin", "round");
			attr(svg, "class", "w-6 h-6");
			attr(button, "class", "relative p-1");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, svg);
			append(svg, path0);
			append(svg, path1);
			append(button, t0);
			if (if_block0) if_block0.m(button, null);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*handlePopup*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*$center*/ ctx[2].length) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(button, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*show*/ ctx[0] && /*$center*/ ctx[2].length) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			if (if_block0) if_block0.d();
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $center;
	component_subscribe($$self, center, $$value => $$invalidate(2, $center = $$value));
	let show = false;
	let { count = 5 } = $$props;

	const handleDismiss = message => {
		center.dismiss(message);

		if ($center.length === 0) {
			$$invalidate(0, show = false);
		}
	};

	const handlePopup = () => {
		if ($center.length === 0) {
			$$invalidate(0, show = false);
		} else {
			$$invalidate(0, show = !show);
		}
	};

	const clearAll = () => {
		center.clear();
		$$invalidate(0, show = false);
	};

	const click_handler = () => $$invalidate(0, show = false);

	$$self.$set = $$props => {
		if ("count" in $$props) $$invalidate(6, count = $$props.count);
	};

	let messages;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$center, count*/ 68) {
			$: $$invalidate(1, messages = $center.slice(0, count));
		}
	};

	return [
		show,
		messages,
		$center,
		handleDismiss,
		handlePopup,
		clearAll,
		count,
		click_handler
	];
}

class Messages extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { count: 6 });
	}
}

export default Messages;